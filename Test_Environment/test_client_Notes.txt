Thermistor Mux Test Client Notes
=====================
This file describes how to set up and run the `client.py` program.  This
is an MQTT client that can be used to send MQTT commands via an MQTT broker to
a Thermistor Mux module and display MQTT messages published by the Thermistor Mux module.  

The Test Client currently only runs as a command-line interface.

Set Up
------
The Test Client requires Python 3.7 or later.

Several additional Python packages must be installed.  The following
instructions are for Debian Linux systems, but commands for other operating
systems should be similar:
  1. Install pip3 (the package manager for Python3):
    - su (to get root privileges, or use sudo with the commands below)
      - apt install python3-pip
      - (Not sure if also necessary) apt install python-pip
      - exit (from su)
  2. Install various packages for Python3:
    - pip3 install paho-mqtt
    - pip3 install protobuf
  3. Install various packages for the GUI:
    - These are not required if running with the `no_gui` option.  Note that
      the PySide6 package used for the GUI isn't available for Raspberry Pi, so
      when running on the Raspberry Pi computers the `no_gui` option must be
      specified.
    - pip3 install PySide6
    - su (to get root privileges, or use sudo with the commands below)
      - apt-get install libopengl0
      - (Not sure if also necessary) apt-get install python3-pyqt5
      - exit (from su)

Running
-------
1. At least one MQTT broker must be running on the network.  This will pass
  messages between the Test Client and the Thermistor Mux module/s.
  - For sample commands to start the brokers on Windows, see
    test_environment/start_test_env.bat.
  - For sample commands to start the brokers on Linux, see
    test_environment/start_test_env.sh.

2. At least one Thermistor Mux module must be running on the network.  Each Thermistor MUX module
  must have a separate ID (0 through 5).

3. Run the Test Client from the test_environment directory:
  On Linux:
    - cd test_environment
    - python3 test_client.py [options...]
  On Windows:
    - cd test_environment
    - python test_client.py [options...]

The Test Client takes several command-line options that control how it
operates.  If no options are specified it will run as a command-line interface and will connect
to Thermistor Mux module 0.  To see a list of the available options, run it with the
`help` argument:
  - python3 client.py help
    Thermistor Mux Client v1.0
    Usage: {sys.argv[ 0 ]} [no_gui] [broker=[BROKER_IP][=BROKER_PORT]] [module=MODULE_ID] [reboot] [show=SHOW_WHAT] [log] [exit]' )
    where no_gui = run the command-line interface instead of the GUI' )
          BROKER_IP = hostname or IP address of MQTT broker (default {DEFAULT_BROKER_URL})' )
          BROKER_PORT = port number of MQTT broker (default {DEFAULT_BROKER_PORT})' )
          MODULE_ID = the Thermistor Mux module number to contact (0-{NUM_MODULES - 1}, default {DEFAULT_MODULE_ID})' )
          reboot = send the Reboot command to the module' )
          show SHOW_WHAT = what to display on the command-line interface when a message is received, where SHOW_WHAT is one of:
              none = don\'t display anything
              errors = just display errors in incoming messages
              topic = just display the message topic and errors
              changed = display the message topic and only those metrics it contains (the default)
              all = display the message topic and all the metrics from this module' )
          log = log inbound data messages to a CSV file with filename thermistorMux_test_log_DATE.csv
          exit = exit as soon as command-line commands are issued

For example (using Linux commands - for Windows replace `python3` with `python`):
  - python3 client.py
      - Run as a command-line interface and connect to Thermistor Mux 0.
  - python3 client.py module=3
      - Run as a command-line interface and connect to Thermistor Mux 3.
  - python3 client.py broker==1884 module=3
      - Connect to Thermistor Mux 3 using the MQTT broker at the default IP address
        but on port 1884.
  - python3 client.py module=3 show=all log
      - Run with a command-line interface, connect to Thermistor Mux 3, show all metrics,
        and turn on data logging.
  - python3 client.py broker=localhost module=4 reboot exit
      - Connect to the MQTT broker on this computer (localhost) on the default
        port (1883), send the Reboot command to Thermistor Mux 4.  Then exit.

The command-line interface supports several interactive commands, which can be
displayed by entering ? or help at the prompt:
    Enter command (? for help, Ctrl-D to quit): ?
            Thermistor Mux Client v{APP_VERSION} connected to Module {option_module_id}
            Commands:
                module MODULE_ID = switch to the Thermistor Mux module number (0-{NUM_MODULES - 1})
                reboot = send the Reboot command to the module
                show SHOW_WHAT = what to display on the command-line interface when a message is received, where SHOW_WHAT is one of:
                    none = don\'t display anything
                    errors = just display errors in incoming messages
                    topic = just display the message topic and errors
            '        changed = display the message topic and only those metrics it contains
                    all = display the message topic and all the metrics from this module
                calibrate CAL_OPTIONS = check calibration status, calibrate thermistors or clear calibration data, where CAL_OPTIONS is one of:
                    temp1 = runs calibration routine for first temperature extreme. (Will set Calibration INW to true)
                    temp2 = runs calibration routine for second temperature extreme.
                    status = Displays thermistor mux calibration status.
                    clear = Permanently deletes stored calibration data. (Temperature displayed will be then be raw values)
                log = toggle logging data messages to CSV on or off
                quit, exit, <Ctrl-D> = stop this program
                help, h, ? = display this list of commands
            Note: Only one command can be specified on the command-line.

Type quit, exit, or <Ctrl-D> (<Ctrl-Z><Enter> on Windows) to exit out of the
command-line interface.
